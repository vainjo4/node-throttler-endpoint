var Q = require('q');
var request = require('request');
var fs = require('fs');

// EXTERNAL VARIABLES	
	
var endpoint;
var token;

var throttler = {

	// INTERNAL VARIABLES	
	
	_requestCount : null,
	_time : null,
	_errorLogFile : "request_log.txt",
	_maxRequestsPerWindow : 600,
	_throttlingWindowSeconds : 600,

	// INTERNAL FUNCTIONS
	
	// begins a new throttling time window
	_newThrottlingPeriod : function(){
	  this._requestCount = 
	    Math.max(0, this._requestCount - this._maxRequestsPerWindow);
	  
	  this._time = process.hrtime();
	},

	// returns the "index" of the next time window in which there is room
	_getTimeWindowIndex : function(){
		return Math.floor(this._requestCount/this._maxRequestsPerWindow)
	},

	// sends the actual request and returns the promise object
	_sendThrottledRequest : function(url, method, body_parameters){

	  if( !exports.endpoint)
		throw new Error("endpoint not specified")
	  else if( !exports.token)
		throw new Error("token not specified")  
	  else if( !this._time)
		throw new Error("_time not inited")
	  
	  var endpoint = exports.endpoint
	  var token = exports.token
	  
	  // seconds passed since the parameter _time
	  var diff = process.hrtime(this._time)[0];
	  
	  // if period has changed, reset counters
	  if(diff > this._throttlingWindowSeconds){
		this.newThrottlingPeriod();
		diff = process.hrtime(this._time)[0];
	  }
	  
	  // construct options object
	  var options = {
		url: url,
		method: method,
		qs: this.token // add token to query string		
	  };
	  
	  // add body parameters, if any  
	  if(body_parameters)
		options.form = body_parameters;
	  
	  // which time window we should use; 0 == current, 1 == next one, etc.
	  var windowIndex = this._getTimeWindowIndex();
	  
	  // get milliseconds to delay, if any
	  var delayms = 0;
	  if(windowIndex > 0)
		delayms = (windowIndex * this._throttlingWindowSeconds - diff) * 1000;
	   
	  // increase count
	  this._requestCount++;
	  
	  console.log("sending...");
	  
	  // return a promise object, delayed until next window with room
	  return Q.delay(delayms).then(	    
		request(options, function (error, response, body) {
		  // write errors and the accompanying responses to file
		  
		  if(error){
		    console.log(error)
			var stream = fs.createWriteStream(throttler._errorLogFile)
			stream.once('open', function(fd) {
              stream.write(error+"\n");			  
              stream.write(response);
              stream.end();
			  
			  // to be handled by .fail()
			throw new Error("Request failed, logged into "+throttler._errorLogFile)
            });			
		  }			
		})		
	  ).fail(function (error) {
	     // just prints it, no exception thrown
         console.log("ERROR :");
		 console.log(error);
      });
	}
}

// EXTERNAL INTERFACE

/**********************
Usage :
api.post('/campaigns', {
  'name': 'Some campaign',
  'budget': 500
});
*/
exports.post = function(str, body_parameters){
  
  if( !exports.endpoint)
	throw new Error("endpoint not specified");
  else if( !exports.token)
	throw new Error("token not specified");
  else if (str !== '/campaigns')
	throw new Error("unsupported url: "+ str);  
  else if( !body_parameters)	
	throw new Error("body parameters missing");
  
  var url = this.endpoint+'/campaigns';
  var method = "POST";
  return throttler._sendThrottledRequest(url, method, body_parameters);
}


/**********************
Usage :
api.put('/campaigns/123', {
  'budget': 1000
});
*/
exports.put = function(str, body_parameters) {	   
  var parts = str.split("/");
  
  if( !exports.endpoint)
	throw new Error("endpoint not specified");
  else if( !exports.token)
	throw new Error("token not specified");  
  else if(parts[1] != "campaigns")
	throw new Error("unsupported url: "+ str);
  else if(parts[2].isNaN())
	throw new Error(parts[2] + " is not a number");
  else if( !body_parameters)	
	throw new Error("body parameters missing");
	
  var url = endpoint + str;
  var method = "PUT";
  return throttler._sendThrottledRequest(url, method, body_parameters);
}


/**********************
Usage :
api.delete('/campaigns/123');
*/
exports.delete = function(str) {
  var parts = str.split("/");
  
  if( !exports.endpoint)
	throw new Error("endpoint not specified");
  else if( !exports.token)
	throw new Error("token not specified");  
  else if(parts[1] != "campaigns")
	throw new Error("unsupported url: "+ str)
  else if(parts[2].isNaN())
	throw new Error(parts[2] + " is not a number")
	
  var url = exports.endpoint + str;
  var method = "DELETE";
  return throttler._sendThrottledRequest(url, method);
}

/*********************
	Usage :
	api.get('/campaigns');
	*/
exports.get = function(str) {

  if( !exports.endpoint)
	throw new Error("endpoint not specified");
  else if( !exports.token)
	throw new Error("token not specified");    
  else if (str !== '/campaigns')
	throw new Error("unsupported url: "+ str);
  
  var url = exports.endpoint+'/campaigns';
  var method = "GET";
  return throttler._sendThrottledRequest(url, method);
}

// init timer & counter
throttler._newThrottlingPeriod();
console.log("throttler ready")